import components.creative_points 1.0
import "./../../public"

Scene2 {
    
    id: scene_obj


    ///////////////// params api
    
    property var afile: param_emachine_afile
    
    ///////////////// params api done
    
    property var setup_info: []
    text: "Сцена"
    DataParam {
        
        id: param_emachine_afile
    
        text: 'afile'
        values: [resolved_2.output /* by qml-xtract.cm2 */]
        multiple: false
        property var val: file
    
        Item {
            //generated by auto_qml_obj
            id: resolved_2
        
            property var output: func_resolved( input_0 )
            property var input_0: "./data/coords.csv"
        }
    }
    
    CreativeLines {
        
        id: obj_0
    
        property var input_0: extract_part_hitro_13.output /* moved to singletones */
        property var input_1: extract_part_hitro_14.output /* moved to singletones */
        property var input_2: extract_part_hitro_15.output /* moved to singletones */
        property var input_3: extract_part_hitro_16.output /* moved to singletones */
        property var input_4: extract_part_hitro_17.output /* moved to singletones */
        property var input_5: extract_part_hitro_18.output /* moved to singletones */
        colors: combine_11.output /* by qml-xtract.cm2 */
        radius: 3
        radiuses: extract_part_hitro_12.output /* moved to singletones */
        positions: []
        text: scene_obj.text+' - линии'
        shader: [final_extras_arr]
        DeferredCalc {
            
            id: obj_2
        
            targetProperty: "positions"
            func: combine_arrays
            params: [parent.input_0,parent.input_1,parent.input_2,parent.input_3,parent.input_4,parent.input_5]
        }
    
        Item {
            //generated by auto_qml_obj
            id: combine_11
        
            property var output: []
            property var input_0: extract_part_hitro_5.output /* moved to singletones */
            property var input_1: extract_part_hitro_6.output /* moved to singletones */
            property var input_2: extract_part_hitro_7.output /* moved to singletones */
            property var input_3: extract_part_hitro_8.output /* moved to singletones */
            property var input_4: extract_part_hitro_9.output /* moved to singletones */
            property var input_5: extract_part_hitro_10.output /* moved to singletones */
            DeferredCalc {
                
                id: obj_1
            
                targetProperty: "output"
                func: func_combine
                params: [parent.input_0,parent.input_1,parent.input_2,parent.input_3,parent.input_4,parent.input_5]
            }
        }
    }
    
    function combine_arrays () {
      
        // ну упаковка.. дали набор одномерных массивов - выдай из них сборку, один массив во viewlang-упаковке
        // todo можно сделать ускоренную версию для 3х входов - var arr1=arguments[0]; и т.д.
        for (var i=0; i<arguments.length; i++,index++)
          if (typeof(arguments[i]) == "undefined") return []; // ну такая защита.. если какой-то аргумент-массив еще не рассчитался.. (бывали случаи)
        
        var len1 = arguments[0].length;
        var acc = new Float32Array(len1 * arguments.length);
        var index = 0;
        for (var line=0; line<len1; line++)
          for (var i=0; i<arguments.length; i++,index++)
            acc[index] = ( arguments[i][line] || 0 );
    
        return acc;
    
    }
    
    ///////////////// singletones!
    
    Item {
        //generated by auto_qml_obj
        id: parse_csv_4
    
        property var output: func_parse_csv( input_0,input_1 )
        property var input_0: obj_3.output /* by qml-xtract.cm2 */
        property var input_1: ","
    
        TextLoader2 {
            
            id: obj_3
        
            property var input_0: resolved_3.output /* by qml-xtract.cm2 */
        
            Item {
                //generated by auto_qml_obj
                id: resolved_3
            
                property var output: func_resolved( input_0 )
                property var input_0: param_emachine_afile.val
            }
        }
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_5
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_csv_4.output /* moved to singletones */
        property var input_1: "*"
        property var input_2: 0
        property var input_3: 'R'
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_6
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_csv_4.output /* moved to singletones, second use */
        property var input_1: "*"
        property var input_2: 0
        property var input_3: 'G'
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_7
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_csv_4.output /* moved to singletones, second use */
        property var input_1: "*"
        property var input_2: 0
        property var input_3: 'B'
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_8
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_csv_4.output /* moved to singletones, second use */
        property var input_1: "*"
        property var input_2: 0
        property var input_3: 'R2'
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_9
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_csv_4.output /* moved to singletones, second use */
        property var input_1: "*"
        property var input_2: 0
        property var input_3: 'G2'
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_10
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_csv_4.output /* moved to singletones, second use */
        property var input_1: "*"
        property var input_2: 0
        property var input_3: 'B2'
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_12
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_csv_4.output /* moved to singletones, second use */
        property var input_1: "*"
        property var input_2: 0
        property var input_3: 'RADIUS'
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_13
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_csv_4.output /* moved to singletones, second use */
        property var input_1: "*"
        property var input_2: 0
        property var input_3: 'X'
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_14
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_csv_4.output /* moved to singletones, second use */
        property var input_1: "*"
        property var input_2: 0
        property var input_3: 'Y'
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_15
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_csv_4.output /* moved to singletones, second use */
        property var input_1: "*"
        property var input_2: 0
        property var input_3: 'Z'
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_16
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_csv_4.output /* moved to singletones, second use */
        property var input_1: "*"
        property var input_2: 0
        property var input_3: 'X2'
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_17
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_csv_4.output /* moved to singletones, second use */
        property var input_1: "*"
        property var input_2: 0
        property var input_3: 'Y2'
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_18
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_csv_4.output /* moved to singletones, second use */
        property var input_1: "*"
        property var input_2: 0
        property var input_3: 'Z2'
    }
    
    /////////////// runtime extras!
    
    property var external_extras_manager: new Object({output:[]})
    property var final_extras_arr: external_extras_manager.output.concat( local_extras_manager.output )
    property var local_extras_manager: obj_extras_manager
    ExtrasManager {
        
        id: obj_extras_manager
    
        title: scene_obj.isRoot ? 'Добавки' : scene_obj.text+'&nbsp;-&nbsp;Добавки'
        input_1: []
    }
    
    sceneconf: '{"params":{"show_axes":1,"cameraPos":[90.30879478282125,83.50807741344764,276.2125278135972],"cameraCenter":[-1.2225417855857,22.603682302906886,-4.047952454274123]}}'
    
    ///////////////// functions!
    
    function func_resolved (u) {
      if (Array.isArray(u)) return Qt.resolvedUrl( u[0] );
      
     return Qt.resolvedUrl( u );
    }
    function func_parse_csv (data,separator) { // data is text blob
      var lines = data.split("\n"); 
      //console.log("lines=",lines.length)
    /* ну вот что она делает.. ну парсит таблицу.. выдает массивчег.. из массивчегов.. ну хоть так для начала
       а дальше.. а дальше нам надо создать из этой штуки поле..
    */
       var trim1 = function (str) {
         return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
       }
       
       var splittrim = function( str,sep ) {
         return str.split( sep ).map( function(e) { return e.trim(); } );
       }
    
       var filter = function ( item ) {
         return parseFloat( item );
       }
    
       var skip="";
      // if (typeof(separator)=="undefined") separator="(\\s|,)";
       if (typeof(separator)=="undefined") separator=","; // чето второй раз сепаратор в csv мне попался запятая )))
    
       var separator_rx = new RegExp( separator );
       //console.log("using separator:",separator_rx );
    
       proj_names = splittrim( lines[0], separator_rx );
       var acc = [];
    
        for (var i=1; i<lines.length; i++) {
          var line = trim1( lines[i] );
          if (skip.length > 0 && line.indexOf(skip) >= 0) continue;
    
          if (line.length == 0) continue;
    
          //var s = line.split(/\s+/);
    
          // todo вытаскивать закавыченные данные надо уметь
    
          var attrs = splittrim(line,separator_rx).map( function(item) {
            // хотя.. может быть стоит сделать такую штуку, которая потом уже csv прочитанный таким методом оснащает данными (парсит)
            // float?
            if (/^[+-]?([0-9]*[.])?[0-9]+((e[+-]?\d+)?)$/.test(item)) // https://stackoverflow.com/questions/12643009/regular-expression-for-floating-point-numbers
              return parseFloat( item );
            // date?
            if (/^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))/.test(item)) // 2019-10-18
              return Date.parse( item );
            if (/^((0[1-9]|[12]\d|3[01])\/(0[1-9]|1[0-2])\/[12]\d{3})/.test(item)) { // 31/04/2015 - но это не обрабатывается date.parse, засим перевернем месяц и год для него, см ниже 
              // гребаные уроды
              var s = item.split("/");
              var s2 = s[1] + "/" + s[0] + "/" + s[2]; // в s[2] окажется и остаток
              return (Date.parse( s2 ) || item);
            }
            if (/^((0[1-9]|[12]\d|3[01])\.(0[1-9]|1[0-2])\.[12]\d{3})/.test(item)) { // 31.04.2015 - но это не обрабатывается date.parse, засим перевернем месяц и год для него, см ниже 
              var s = item.split(".");
              var s2 = s[1] + "/" + s[0] + "/" + s[2]; // в s[2] окажется и остаток
              return (Date.parse( s2 ) || item);
            }        
            return item;
          } );
    
          for (var j=0; j<attrs.length; j++) {
            acc[j] = acc[j] || [];
            acc[j].push( attrs[j] );
          }
        }
          
        var res = {};
        for (var j=0; j<proj_names.length; j++)
          res[ proj_names[j] ] = acc[j];
        // ну кстати оно тут порядок не сохраняет.. а мы (ну Миша) его любим..
        res[ "colnames" ] = proj_names;
    
        //output = revert ? acc.reverse() : acc; -- оставим в качестве памятника тупости некомпозиционности
        return res;
        
        // todo позаниматься загрузкой во флоаты 
        // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from
        // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Float32Array
    }
    function func_extract_part_hitro (obj,name,index,realname) {
      if (Array.isArray(obj)) {
         if (name == "*") // сообразно index всегда 0, но зато realname нечто настоящее
           return obj[ parseInt(realname) ];
         else
           return obj[index];
      }
      // ну надеемся что obj это хеш
        
      if (name == "*")
        return obj[realname] || [];
          
      return obj[name] || [];
    }
    function func_combine () {
      return combine_arrays.apply( this,arguments );
    }
}
