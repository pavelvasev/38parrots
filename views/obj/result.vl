import components.creative_points 1.0
import "./../../public"

Scene2 {
    
    id: scene_obj


    ///////////////// params api
    
    property var afile: param_emachine_afile
    
    ///////////////// params api done
    
    property var setup_info: []
    text: "Obj"
    DataParam {
        
        id: param_emachine_afile
    
        text: 'afile'
        values: [resolved_2.output /* by qml-xtract.cm2 */]
        multiple: false
        property var val: file
    
        Item {
            //generated by auto_qml_obj
            id: resolved_2
        
            property var output: func_resolved( input_0 )
            property var input_0: "./dubins_-05_m_l_0_pi_scaled_3.5.obj"
        }
    }
    
    CreativePoints {
        
        id: obj_0
    
        property var input_0: extract_part_hitro_5.output /* moved to singletones */
        property var input_1: extract_part_hitro_6.output /* moved to singletones */
        property var input_2: extract_part_hitro_7.output /* moved to singletones */
        radius: 0.25
        positions: []
        text: scene_obj.text+' - точки'
        shader: [final_extras_arr]
        DeferredCalc {
            
            id: obj_1
        
            targetProperty: "positions"
            func: combine_arrays
            params: [parent.input_0,parent.input_1,parent.input_2]
        }
    }
    
    CreativeTrimesh {
        
        id: obj_2
    
        property var input_0: extract_part_hitro_5.output /* moved to singletones, second use */
        property var input_1: extract_part_hitro_6.output /* moved to singletones, second use */
        property var input_2: extract_part_hitro_7.output /* moved to singletones, second use */
        flat: 1
        indices: combine_11.output /* by qml-xtract.cm2 */
        text: scene_obj.text+' - поверхность'
        positions: []
        shader: [final_extras_arr]
        DeferredCalc {
            
            id: obj_4
        
            targetProperty: "positions"
            func: combine_arrays
            params: [parent.input_0,parent.input_1,parent.input_2]
        }
    
        Item {
            //generated by auto_qml_obj
            id: combine_11
        
            property var output: []
            property var input_0: extract_part_hitro_8.output /* moved to singletones */
            property var input_1: extract_part_hitro_9.output /* moved to singletones */
            property var input_2: extract_part_hitro_10.output /* moved to singletones */
            DeferredCalc {
                
                id: obj_3
            
                targetProperty: "output"
                func: func_combine
                params: [parent.input_0,parent.input_1,parent.input_2]
            }
        }
    }
    
    function combine_arrays () {
      
        // ну упаковка.. дали набор одномерных массивов - выдай из них сборку, один массив во viewlang-упаковке
        // todo можно сделать ускоренную версию для 3х входов - var arr1=arguments[0]; и т.д.
        for (var i=0; i<arguments.length; i++,index++)
          if (typeof(arguments[i]) == "undefined") return []; // ну такая защита.. если какой-то аргумент-массив еще не рассчитался.. (бывали случаи)
        
        var len1 = arguments[0].length;
        var acc = new Float32Array(len1 * arguments.length);
        var index = 0;
        for (var line=0; line<len1; line++)
          for (var i=0; i<arguments.length; i++,index++)
            acc[index] = ( arguments[i][line] || 0 );
    
        return acc;
    
    }
    
    ///////////////// singletones!
    
    Item {
        //generated by auto_qml_obj
        id: parse_obj_4
    
        property var output: func_parse_obj( input_0 )
        property var input_0: obj_5.output /* by qml-xtract.cm2 */
    
        TextLoader2 {
            
            id: obj_5
        
            property var input_0: resolved_3.output /* by qml-xtract.cm2 */
        
            Item {
                //generated by auto_qml_obj
                id: resolved_3
            
                property var output: func_resolved( input_0 )
                property var input_0: param_emachine_afile.val
            }
        }
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_5
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_obj_4.output /* moved to singletones */
        property var input_1: "x"
        property var input_2: 0
        property var input_3: ''
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_6
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_obj_4.output /* moved to singletones, second use */
        property var input_1: "y"
        property var input_2: 1
        property var input_3: ''
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_7
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_obj_4.output /* moved to singletones, second use */
        property var input_1: "z"
        property var input_2: 2
        property var input_3: ''
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_8
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_obj_4.output /* moved to singletones, second use */
        property var input_1: "i1"
        property var input_2: 0
        property var input_3: ''
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_9
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_obj_4.output /* moved to singletones, second use */
        property var input_1: "i2"
        property var input_2: 1
        property var input_3: ''
    }
    
    Item {
        //generated by auto_qml_obj
        id: extract_part_hitro_10
    
        property var output: func_extract_part_hitro( input_0,input_1,input_2,input_3 )
        property var input_0: parse_obj_4.output /* moved to singletones, second use */
        property var input_1: "i3"
        property var input_2: 2
        property var input_3: ''
    }
    
    /////////////// runtime extras!
    
    property var external_extras_manager: new Object({output:[]})
    property var final_extras_arr: external_extras_manager.output.concat( local_extras_manager.output )
    property var local_extras_manager: obj_extras_manager
    ExtrasManager {
        
        id: obj_extras_manager
    
        title: scene_obj.isRoot ? 'Добавки' : scene_obj.text+'&nbsp;-&nbsp;Добавки'
        input_1: []
    }
    
    sceneconf: '{"params":{"cameraCenter":[-0.5447526706403544,-0.0801515077588314,0.8736028449724806],"cameraPos":[6.551260033485626,3.226836362021615,10.640426438365177],"extras/AutoScale/masshtab":0.7320508075688774,"extras/ShaderClipS_z/dolya":1,"extras/ShaderClipS_z/shag":3.8,"extras/onoff_AutoScale":1,"extras/onoff_ShaderClipS_z":1,"presets":[{"title":"Примеры","variants":[{"params":{"afile":["http://viewlang.ru/objs/v2/dubins_-05_m_l_0_pi_scaled_3.5.obj"]},"title":"dubins_-05_m_l_0_pi_scaled_3.5"},{"params":{"afile":["http://viewlang.ru/objs/v2/dubins_-1_m_l_0_3pi_scaled_3.5.obj"]},"title":"dubins_-1_m_l_0_3pi_scaled_3.5"},{"params":{"afile":["http://viewlang.ru/objs/v2/dubins_-1_m_l_0_3pi_scaled_3.5_reore.obj"]},"title":"dubins_-1_m_l_0_3pi_scaled_3.5_reore"}]}],"radius":0,"show_axes":0}}'
    
    ///////////////// functions!
    
    function func_resolved (u) {
      if (Array.isArray(u)) return Qt.resolvedUrl( u[0] );
      
     return Qt.resolvedUrl( u );
    }
    function func_parse_obj (lines) {
      console.time("parse_obj");
      
      var x=[];
      var y=[];
      var z=[];
      var i1=[];
      var i2=[];
      var i3=[];
      
    /* идея была хороша, но пуша там нет  
      var x = new Float32Array();
      var y = new Float32Array();
      var z = new Float32Array();
      var i1 = new Uint32Array();
      var i2 = new Uint32Array();
      var i3 = new Uint32Array();
    */  
    /*  
      var vn = []
      var vt = []
      var f = []
      var fn = []
      var ft = []
    */
      
      var perliner = function(line) {
          if(line.length === 0 || line.charAt(0) === "#") {
            return
          }
          var toks = line.split(" ")
          switch(toks[0]) {
            case "v":
              if(toks.length < 3) {
                throw new Error("parse-obj: Invalid vertex :" + line)
              }
              x.push(+toks[1]);
              y.push(+toks[2]);
              z.push(+toks[3]);
              //v.push([+toks[1], +toks[2], +toks[3]])
            break
    
            case "vn":
            break; // нафиг эти мне нормали..
              if(toks.length < 3) {
                throw new Error("parse-obj: Invalid vertex normal:"+ line)
              }
              vn.push([+toks[1], +toks[2], +toks[3]])
            break
    
            case "vt":
            break; // не используем и это
              if(toks.length < 2) {
                throw new Error("parse-obj: Invalid vertex texture coord:" + line)
              }
              vt.push([+toks[1], +toks[2]])
            break
    
            case "f":
              i1.push( parseInt(toks[1])-1 );
              i2.push( parseInt(toks[2])-1 );
              i3.push( parseInt(toks[3])-1 );
              //i1.push( (toks[2].split("/")[0]|0)-1 );
              break; // лесом все
              var normal = new Array(toks.length-1)
              var texCoord = new Array(toks.length-1)
              for(var i=1; i<toks.length; ++i) {
                var indices = toks[i].split("/")
                position[i-1] = (indices[0]|0)-1
                texCoord[i-1] = indices[1] ? (indices[1]|0)-1 : -1
                normal[i-1] = indices[2] ? (indices[2]|0)-1 : -1
              }
              f.push(position)
              fn.push(normal)
              ft.push(texCoord)
            break
    
            case "vp":
            case "s":
            case "o":
            case "g":
            case "usemtl":
            case "mtllib":
              //Ignore this crap
            break
    
            default:
              throw new Error("parse-obj: Unrecognized directive: '" + toks[0] + "'")
          } // switch
        }
        
      var lines_arr = lines.split(/\n/);
      for (var i=0; i<lines_arr.length; i++ )
      {
        perliner( lines_arr[i] );
      }
      console.timeEnd("parse_obj");
      
      var res = {
            x:x, y:y, z:z,
            i1:i1, i2:i2, i3:i3
      }
      /*        
      var res = {        
            positions: v,
            normals: vn,
            uvs: vt,
            indices: f,
            indices_f3: fn,
            indicec_f3_uvs: ft
          }
      */    
      return res;
    }
    function func_extract_part_hitro (obj,name,index,realname) {
      if (Array.isArray(obj)) {
         if (name == "*") // сообразно index всегда 0, но зато realname нечто настоящее
           return obj[ parseInt(realname) ];
         else
           return obj[index];
      }
      // ну надеемся что obj это хеш
        
      if (name == "*")
        return obj[realname] || [];
          
      return obj[name] || [];
    }
    function func_combine () {
      return combine_arrays.apply( this,arguments );
    }
}
